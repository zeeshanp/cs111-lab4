# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Kevin Sheu
Student ID: 204160159
Email: kevinsheu@ucla.edu

# Partner 2 (if you're working in a team)
Name: Zeeshan Pirzada
Student ID: 404144615
Email: pirzadaza@gmail.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used fork() to run the downloads and uploads in parallel. We processeed 
all of the downloads first and used a blocking wait for all the downloads to
finish. Then, we processed the uploads.


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
In the start_download and task_download functions, there was a buffer
overflow bug involving the file name. strcpy was used, so the buffer could
be potentially overflowed. We fixed this by using strncpy to restrict the
buffer size and also adding a null byte at the end.


# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
- Increased task buffer size
We increased the value of TASKBUFSIZE from 4096 to 65536 (64 KB). This
improves the robustness by allowing a greater number of peers to connect.
- Restricted maximum file size
We set a limit to the size of the downloaded file to 10 MB (This can be
changed). This improves robustness by prevent peers from transferring large
amounts of data and taking up disk space.
- Prevent download from other directories
We checked if the peer was trying to access outside directories. We did this
by checking if the requested filename started with "..","/", or "~", which
indicates that the file requested is in an outside directory. If this was
true, the request was dropped.


# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
-Buffer overflow attack
We could first try and attack other clients with a buffer overflow attack. We use the GET command with a very large file name that is not null terminated. We could do this in the following way:
	osp2p_writef(t->peer_fd, "GET %s%s%s%s OSP2P\n", t->filename, t->filename, t->filename, t->filename);
-Steal their important files:
	osp2p_writef(t->peer_fd, "GET ~/important/stuff.c OSP2P\n");
-DoS attack:
	while (1) {
		osp2p_write(t->peer_fd, "Lol");
	}


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
